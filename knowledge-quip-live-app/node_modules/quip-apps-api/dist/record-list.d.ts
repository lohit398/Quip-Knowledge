import Record from "./record";
import Client from "./client";
export default class RecordList<T extends Record> {
    idValue: string;
    recordsValue: T[];
    isDeletedValue: boolean;
    static TYPE_SENTINAL: {};
    static Type<T>(RecordConstructor: {
        new (): T;
    }): {
        TYPE_SENTINAL: {};
        RecordConstructor: new () => T;
    };
    private recordConstructor_;
    constructor(client: Client | null, RecordConstructor: {
        new (): T;
    });
    getId(): string;
    getRecords(): T[];
    count(): number;
    add(value: {
        [key: string]: any;
    }, index?: number): T;
    contains(item: T): boolean;
    delete(): void;
    get(index: number): T;
    indexOf(item: T): number;
    isDeleted(): void;
    move(item: T, index: number): boolean;
    remove(item: T, skipDelete?: boolean): boolean;
    listen(listener: (list: RecordList<T>) => void): void;
    unlisten(listener: (list: RecordList<T>) => void): void;
}
export declare type listPropertyType<T> = {
    TYPE_SENTINAL: Object;
    RecordConstructor: {
        new (): T;
    };
};
//# sourceMappingURL=record-list.d.ts.map