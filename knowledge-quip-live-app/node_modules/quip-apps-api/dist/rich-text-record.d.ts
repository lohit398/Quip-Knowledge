import Record from "./record";
export interface RichTextRecordProperties {
    RichText_defaultText: string;
    RichText_placeholderText: string;
}
export default class RichTextRecord extends Record {
    emptyValue: boolean;
    placeholderTextValue: string;
    textContentValue: string;
    static InlineStyle: {
        BOLD: number;
        ITALIC: number;
        UNDERLINE: number;
        STRIKETHROUGH: number;
        CODE: number;
    };
    static Style: {
        TEXT_PLAIN: number;
        TEXT_H1: number;
        TEXT_H2: number;
        TEXT_H3: number;
        TEXT_CODE: number;
        TEXT_BLOCKQUOTE: number;
        TEXT_PULL_QUOTE: number;
        LIST_BULLET: number;
        LIST_NUMBERED: number;
        LIST_CHECKLIST: number;
        HORIZONTAL_RULE: number;
        IMAGE: number;
    };
    clearContent(): void;
    delete(): void;
    empty(): boolean;
    focus(fromPrevious?: boolean): void;
    getPlaceholderText(): string;
    getTextContent(): string;
    insertText(text: string): void;
    listenToContent(listener: (record: Record) => void): void;
    unlistenToContent(listener: (record: Record) => void): void;
    listenToSave(listener: (record: Record) => void): void;
    unlistenToSave(listener: (record: Record) => void): void;
    replaceContent(text: string): void;
    selectAll(): void;
    setDeleted(): void;
}
//# sourceMappingURL=rich-text-record.d.ts.map