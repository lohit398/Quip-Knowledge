import FormData from "form-data";
interface ErrorResponse {
    error: string;
    response?: string;
}
interface AppVersionResponse {
    created_sequence: number;
    version_number: number;
    version_name: string;
    released: string;
}
export interface AppVersionsResponse {
    name: string;
    release?: AppVersionResponse;
    development?: AppVersionResponse;
    versions: AppVersionResponse[];
}
export interface AppListInfo {
    name: string;
    id: string;
}
interface ReleasableVersionReponse {
    created_sequence: number;
    version_number: number;
    version_name: string;
}
export interface ReleasableVersionsReponse {
    name: string;
    versions: ReleasableVersionReponse[];
}
export interface ReleaseAppResponse {
    destination: string;
    version_number: number;
    version_name: string;
    build_sequence: number;
}
export interface AppsListResponse {
    released: AppListInfo[];
    development: AppListInfo[];
    disabled: AppListInfo[];
}
export declare const getStateString: () => string;
export declare const successOnly: <T extends Object>(promise: Promise<ErrorResponse | T>, printJson: boolean) => Promise<false | T>;
declare const cliAPI: (configPath: string, site: string) => Promise<(<T>(path: string, method?: "get" | "post" | undefined, data?: FormData | {
    [key: string]: any;
} | undefined) => Promise<ErrorResponse | T>)>;
export declare const platformHost: (site: string) => string;
export declare const callAPI: <T = any>(site: string, path: string, method?: "get" | "post" | undefined, data?: FormData | {
    [key: string]: any;
} | undefined, accessToken?: string | undefined) => Promise<T | ErrorResponse>;
export default cliAPI;
