"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class RecordList {
    constructor(client, RecordConstructor) {
        this.idValue = "mock-record-list";
        this.recordsValue = [];
        this.isDeletedValue = false;
        this.recordConstructor_ = RecordConstructor;
    }
    static Type(RecordConstructor) {
        return {
            TYPE_SENTINAL: RecordList.TYPE_SENTINAL,
            RecordConstructor,
        };
    }
    getId() {
        return this.idValue;
    }
    getRecords() {
        return this.recordsValue;
    }
    count() {
        return this.recordsValue.length;
    }
    // TODO: can this conform to valid props for this classes of type T?
    // Probably would need to deprecate getProperties in favor of static
    // properties definition
    add(value, index) {
        const RecordConstructor = this.recordConstructor_;
        const item = new RecordConstructor();
        item.initialize();
        item.containingListValue = this;
        for (const key in value) {
            item.set(key, value[key]);
        }
        if (index === undefined) {
            this.recordsValue.push(item);
        }
        else {
            this.recordsValue.splice(index, 0, item);
        }
        return item;
    }
    contains(item) {
        return !!this.recordsValue.find(i => i === item);
    }
    delete() {
        this.isDeletedValue = true;
    }
    get(index) {
        return this.recordsValue[index];
    }
    indexOf(item) {
        return this.recordsValue.findIndex(i => i === item);
    }
    isDeleted() {
        this.isDeletedValue;
    }
    move(item, index) {
        const parent = item.containingListValue;
        if (index < 0) {
            return false;
        }
        if (parent) {
            parent.remove(item);
            this.recordsValue.splice(index, 0, item);
        }
        return true;
    }
    remove(item, skipDelete) {
        const idx = this.indexOf(item);
        if (idx > -1) {
            this.recordsValue.splice(idx, 1);
            return true;
        }
        return false;
    }
    listen(listener) { }
    unlisten(listener) { }
}
exports.default = RecordList;
RecordList.TYPE_SENTINAL = {};
//# sourceMappingURL=record-list.js.map