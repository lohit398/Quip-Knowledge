import Auth from "./auth";
export interface OAuthRequestParams {
    url: string;
    method?: string;
    query?: {
        [key: string]: string;
    };
    headers?: {
        [key: string]: string;
    };
    data?: {
        [key: string]: any;
    };
}
export default class BaseOAuth extends Auth {
    tokenResponseValue: {
        [key: string]: string;
    };
    nextHttpResponseValue: HttpResponse;
    getTokenResponse(): {
        [key: string]: string;
    };
    getTokenResponseParam(param: string): string;
    isLoggedIn(): boolean;
    login(params?: {
        [name: string]: string;
    }): Promise<boolean>;
    logout(): Promise<HttpResponse>;
    request<T = Object>(params: OAuthRequestParams): Promise<HttpResponse<T>>;
}
export declare class HttpResponse<T = Object> {
    url: string;
    status: number;
    statusText: string;
    headers: HttpHeaders;
    private body_;
    ok: boolean;
    constructor(options?: {
        url?: string;
        body?: string;
        status?: number;
        statusText?: string;
        headers?: HttpHeaders | {
            [name: string]: string;
        };
    });
    text(): string;
    json(): T;
    toJSON(): string;
}
export declare class HttpHeaders {
    private map_;
    constructor(headers?: {
        [name: string]: string;
    });
    append_(name: string, value: string): void;
    get(name: string): any;
    has(name: string): boolean;
}
//# sourceMappingURL=base-oauth.d.ts.map