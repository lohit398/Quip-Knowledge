"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readConfig = exports.writeSiteConfig = exports.defaultConfigPath = exports.NPM_BINARY_NAME = exports.SKIP_SSL_FOR_SITES = exports.DEFAULT_SITE = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const os_1 = tslib_1.__importDefault(require("os"));
const path_1 = tslib_1.__importDefault(require("path"));
const util_1 = require("./util");
exports.DEFAULT_SITE = "quip.com";
exports.SKIP_SSL_FOR_SITES = new Set(["quip.codes"]);
exports.NPM_BINARY_NAME = /^win/.test(process.platform)
    ? "npm.cmd"
    : "npm";
exports.defaultConfigPath = () => path_1.default.join(os_1.default.homedir(), ".quiprc");
exports.writeSiteConfig = async (configPath, site, config) => {
    const qlaConfig = await exports.readConfig(configPath);
    qlaConfig.sites[site] = config;
    writeConfig(configPath, qlaConfig);
};
const writeConfig = (configPath, config) => {
    let newConfig = Object.assign({}, config);
    delete newConfig._exists;
    return fs_1.default.promises.writeFile(configPath, JSON.stringify(newConfig, null, 2), "utf-8");
};
exports.readConfig = async (configPath) => {
    if (!(await util_1.pathExists(configPath))) {
        return { _exists: false, sites: {} };
    }
    const configStr = (await fs_1.default.promises.readFile(configPath, "utf-8"));
    try {
        const config = Object.assign({ _exists: true }, JSON.parse(configStr));
        config.sites = config.sites || {};
        return config;
    }
    catch (e) {
        throw new Error(`Corrupted config: ${e.message}`);
    }
};
