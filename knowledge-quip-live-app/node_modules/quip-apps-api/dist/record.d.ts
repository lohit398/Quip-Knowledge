import Client from "./client";
import RecordIndex from "./record-index";
import RecordList, { listPropertyType } from "./record-list";
export declare const isRecord: (obj: any) => obj is Record;
export declare type RecordConstructor = {
    new (): Record;
};
export declare enum RecordType {
    "NONE" = 0,
    "RICH_TEXT" = 1,
    "IMAGE" = 2,
    "LIST" = 3,
    "CANVAS" = 4,
    "COMMENT_ANCHOR" = 5
}
export declare type RecordParams = {
    data: {
        [key: string]: any;
    };
    dataVersion?: number;
    constructorKey?: string;
    recordConstructor?: RecordConstructor;
    entityType?: RecordType;
    recordType?: RecordType;
    defaultText?: string;
    requestedThumbnailWidths?: number[];
};
export interface RecordPropertyDefinition {
    [property: string]: string | RecordConstructor | listPropertyType<any>;
}
export default abstract class Record {
    idValue: string;
    uniqueIdValue: string;
    isDeletedValue: boolean;
    childrenIndexValue: RecordIndex<any>;
    positionValue: string;
    dataVersionValue: number;
    parentIdValue: string;
    parentValue?: Record;
    parentRecordValue?: Record;
    containingListValue?: RecordList<any>;
    previousSiblingValue?: Record;
    nextSiblingValue?: Record;
    commentCountValue: number;
    childrenValue: Record[];
    isHighlightHiddenValue?: boolean;
    protected data_: {
        [key: string]: any;
    };
    static getProperties(): RecordPropertyDefinition;
    static getDefaultProperties(): {
        [property: string]: any;
    };
    protected typeSentinal_: Object;
    constructor(client?: Client, pb?: Object, schema?: any);
    initialize(): void;
    listen(listener: (record: Record) => void): void;
    unlisten(listener: (record: Record) => void): void;
    getChildrenIndex(): RecordIndex<this>;
    id(): string;
    getId(): string;
    getUniqueId(): string;
    isDeleted(): boolean;
    getData(): {
        [key: string]: any;
    };
    getPosition(): string;
    get(key: string): any;
    has(key: string): boolean;
    set(key: string, value: any): void;
    clear(key: string, skipDelete?: boolean): Record | RecordList<any> | undefined;
    clearData(): void;
    setDataVersion(version: number): void;
    getParent(): Record | undefined;
    getParentId(): string;
    getParentRecord(): Record | undefined;
    getContainingList(): RecordList<any> | undefined;
    setDeleted(): void;
    delete(): void;
    getPreviousSibling(): Record | undefined;
    getNextSibling(): Record | undefined;
    createSiblingBefore(recordParams: RecordParams): Record;
    createSiblingAfter(recordParams: RecordParams): Record;
    getChildren(): Record[];
    getCommentCount(): number;
    getDataVersion(): number;
    getDom(): Element;
    isHighlightHidden(): boolean | undefined;
    listenToComments(listener: (record: Record) => void): void;
    notifyListeners(): void;
    setOrphanedState(): void;
    supportsComments(): boolean;
    unlistenToComments(listener: (record: Record) => void): void;
}
//# sourceMappingURL=record.d.ts.map