import React, { Component } from "react";
import { CanvasRecordCommentAnchorRecord } from "./canvas-record";
import Record from "./record";
import User from "./user";
import RichTextRecord from "./rich-text-record";
import ImageRecord from "./image-record";
export declare class Backdrop extends Component<{
    onClick?: (event: React.MouseEvent<HTMLDivElement>) => void;
}> {
    render(): React.DetailedReactHTMLElement<React.HTMLAttributes<HTMLElement>, HTMLElement>;
}
export declare class Button extends Component<{
    className?: string;
    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
    primary?: boolean;
    text: React.ReactNode;
    type?: "button" | "submit" | "reset";
    disabled?: boolean;
}> {
    render(): React.DetailedReactHTMLElement<React.HTMLAttributes<HTMLElement>, HTMLElement>;
}
export declare class CalendarPicker extends Component<{
    initialSelectedDateMs: number;
    onChangeSelectedDateMs: (dateMs: number) => void;
}> {
    render(): React.DetailedReactHTMLElement<React.HTMLAttributes<HTMLElement>, HTMLElement>;
}
export declare class Canvas extends Component<{
    record: CanvasRecordCommentAnchorRecord;
    isInCommentMode?: boolean;
    onCommentAdd?: () => void;
    cancelCommentMode?: () => any;
    isCommentAnchorValidCallback?: (anchor: CanvasRecordCommentAnchorRecord) => boolean;
}> {
    render(): React.DetailedReactHTMLElement<React.HTMLAttributes<HTMLElement>, HTMLElement>;
}
export declare const Color: {
    BACKGROUND: string;
    SECONDARY_BACKGROUND: string;
    TEXT: string;
    SECONDARY_TEXT: string;
    ACTION: string;
    RED: string;
    ORANGE: string;
    YELLOW: string;
    GREEN: string;
    BLUE: string;
    VIOLET: string;
    SELECTION: string;
    WHITE: string;
};
export declare const ColorMap: {
    RED: {
        KEY: string;
        LABEL: string;
        VALUE: string;
        VALUE_LIGHT: string;
        VALUE_STROKE: string;
    };
    ORANGE: {
        KEY: string;
        LABEL: string;
        VALUE: string;
        VALUE_LIGHT: string;
        VALUE_STROKE: string;
    };
    YELLOW: {
        KEY: string;
        LABEL: string;
        VALUE: string;
        VALUE_LIGHT: string;
        VALUE_STROKE: string;
    };
    GREEN: {
        KEY: string;
        LABEL: string;
        VALUE: string;
        VALUE_LIGHT: string;
        VALUE_STROKE: string;
    };
    BLUE: {
        KEY: string;
        LABEL: string;
        VALUE: string;
        VALUE_LIGHT: string;
        VALUE_STROKE: string;
    };
    VIOLET: {
        KEY: string;
        LABEL: string;
        VALUE: string;
        VALUE_LIGHT: string;
        VALUE_STROKE: string;
    };
    WHITE: {
        KEY: string;
        LABEL: string;
        VALUE: string;
        VALUE_LIGHT: string;
        VALUE_STROKE: string;
    };
};
export declare class CommentsTrigger extends Component<{
    entity?: Record;
    record?: Record;
    color?: keyof typeof ColorMap;
    invertColor?: boolean;
    showEmpty?: boolean;
    className?: string;
}> {
    render(): React.DetailedReactHTMLElement<React.HTMLAttributes<HTMLElement>, HTMLElement>;
}
export declare enum ImageMode {
    NONE = 0,
    FOCUSED = 1,
    COMMENT = 2,
    CROP = 3
}
export declare class Image extends Component<{
    record: ImageRecord;
    width: number;
    onWidthAndAspectRatioUpdate: (width: number | null, aspectRatio: number | null) => void;
    minWidth: number;
    minHeight: number;
    placeholderWidth: number;
    placeholderHeight: number;
    placeholderText: string;
    mode: ImageMode;
    onFocusChanged?: (focused: boolean) => void;
    onImageLoaded?: (record: ImageRecord) => void;
    onOperationCompleted?: () => void;
    altText?: string;
    className?: string;
}> {
    render(): React.DetailedReactHTMLElement<React.HTMLAttributes<HTMLElement>, HTMLElement>;
}
export declare class ProfilePicture extends Component<{
    user: User;
    size: number;
    round?: boolean;
    fallbackToInitials?: boolean;
}> {
    render(): React.DetailedReactHTMLElement<React.HTMLAttributes<HTMLElement>, HTMLElement>;
}
export declare enum Style {
    TEXT_PLAIN_STYLE = 0,
    TEXT_H1_STYLE = 1,
    TEXT_H2_STYLE = 2,
    TEXT_H3_STYLE = 3,
    TEXT_CODE_STYLE = 4,
    LIST_BULLET_STYLE = 5,
    LIST_NUMBERED_STYLE = 6,
    LIST_CHECKLIST_STYLE = 7,
    TABLE_BODY_STYLE = 8,
    TABLE_SPREADSHEET_STYLE = 13,
    TABLE_ROW_STYLE = 9,
    TABLE_COL_STYLE = 10,
    IMAGE_STYLE = 11,
    FORMULA_STYLE = 12,
    DEPRECATED_CHART_STYLE = 14,
    TEXT_BLOCKQUOTE_STYLE = 16,
    TEXT_PULL_QUOTE_STYLE = 17,
    HORIZONTAL_RULE_STYLE = 18,
    ELEMENT_BODY_STYLE = 19,
    ELEMENT_CHILD_STYLE = 20,
    ELEMENT_BODY_STUB_STYLE = 25,
    LAYOUT_FLEXBOX_STYLE = 21,
    LAYOUT_GRID_STYLE = 23,
    SLIDE_STYLE = 22,
    PRESENTATION_STYLE = 24,
    LAYOUT_READER_NOTES_STYLE = 26,
    CHART_STYLE = 27,
    SHAPE_STYLE = 29,
    FEEDBACK_STICKER_STYLE = 30,
    LIVE_CHART_STYLE = 31,
    TASK_STYLE = 32,
    VIDEO_STYLE = 33,
    DASHBOARD_CHART_STYLE = 34,
    LAYOUT_REFERENCED_STYLE = 35
}
export declare class RichTextBox extends Component<{
    entity?: RichTextRecord;
    record?: RichTextRecord;
    scrollable?: boolean;
    width?: string | number;
    minHeight?: string | number;
    maxHeight?: string | number;
    disableAutocomplete?: boolean;
    disableInlineMenus?: boolean;
    disableLinkification?: boolean;
    onComponentHeightChanged?: (height: number) => void;
    useDocumentTheme?: boolean;
    allowImages?: boolean;
    allowLists?: boolean;
    allowHeadings?: boolean;
    allowSpecialTextStyles?: boolean;
    allowHorizontalRules?: boolean;
    allowedStyles?: Style[];
    allowedInlineStyles?: keyof typeof RichTextBox.InlineStyle[];
    maxListIndentationLevel?: number;
    readOnly?: boolean;
    disableSelection?: boolean;
    onFocus?: () => void;
    onBlur?: () => void;
    handleKeyEvent?: (e: React.KeyboardEvent<any>) => void;
    color?: keyof typeof ColorMap;
    allowDefaultTabNavigation?: boolean;
}> {
    render(): React.DetailedReactHTMLElement<React.HTMLAttributes<HTMLElement>, HTMLElement>;
    static InlineStyle: {
        [style: string]: string;
    };
}
export declare class Spinner extends Component<{
    /** default: 40 */
    size?: number;
    padding?: number;
    /** default: #666 */
    color?: string;
    backgroundColor?: string;
    /** default: 1 */
    time?: number;
    width?: number;
    length?: number;
    /** default: 12 */
    numSpokes?: number;
    className?: string;
}> {
    render(): React.DetailedReactHTMLElement<React.HTMLAttributes<HTMLElement>, HTMLElement>;
}
//# sourceMappingURL=ui.d.ts.map