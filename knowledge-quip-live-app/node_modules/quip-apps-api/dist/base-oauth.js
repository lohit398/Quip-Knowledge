"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const auth_1 = __importDefault(require("./auth"));
class BaseOAuth extends auth_1.default {
    constructor() {
        super(...arguments);
        this.tokenResponseValue = {};
        this.nextHttpResponseValue = new HttpResponse();
    }
    getTokenResponse() {
        return this.tokenResponseValue;
    }
    getTokenResponseParam(param) {
        return this.tokenResponseValue[param];
    }
    isLoggedIn() {
        return !!this.getTokenResponseParam("access_token");
    }
    login(params) {
        return Promise.resolve(true);
    }
    logout() {
        return Promise.resolve(new HttpResponse());
    }
    request(params) {
        return Promise.resolve(this.nextHttpResponseValue);
    }
}
exports.default = BaseOAuth;
class HttpResponse {
    constructor(options = {
        url: undefined,
        body: undefined,
        status: undefined,
        statusText: undefined,
        headers: undefined,
    }) {
        this.url = options.url || "";
        this.status = options.status || 200;
        this.statusText = options.statusText || "OK";
        this.headers =
            options.headers instanceof HttpHeaders
                ? options.headers
                : new HttpHeaders(options.headers);
        this.body_ = options.body || "";
        this.ok = this.status >= 200 && this.status < 300;
    }
    text() {
        return this.body_;
    }
    json() {
        return JSON.parse(this.body_);
    }
    toJSON() {
        return JSON.stringify({
            url: this.url,
            body: this.body_,
            status: this.status,
            statusText: this.statusText,
            headers: this.headers,
        });
    }
}
exports.HttpResponse = HttpResponse;
class HttpHeaders {
    constructor(headers) {
        this.map_ = new Map();
        if (headers) {
            Object.getOwnPropertyNames(headers).forEach(name => {
                this.append_(name, headers[name]);
            });
        }
    }
    append_(name, value) {
        const oldValue = this.map_.get(name);
        this.map_.set(name, oldValue ? `${oldValue},${value}` : value);
    }
    get(name) {
        return this.has(name) ? this.map_.get(name) : null;
    }
    has(name) {
        return this.map_.has(name);
    }
}
exports.HttpHeaders = HttpHeaders;
//# sourceMappingURL=base-oauth.js.map