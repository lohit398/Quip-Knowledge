"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const blob_1 = __importDefault(require("./blob"));
const preferences_1 = __importDefault(require("./preferences"));
const root_record_1 = __importDefault(require("./root-record"));
const user_1 = __importDefault(require("./user"));
var QuipIcon;
(function (QuipIcon) {
    QuipIcon[QuipIcon["COMMENT_INLINE"] = 1] = "COMMENT_INLINE";
    QuipIcon[QuipIcon["FULL_SCREEN"] = 2] = "FULL_SCREEN";
    QuipIcon[QuipIcon["CROP"] = 3] = "CROP";
    QuipIcon[QuipIcon["SALESFORCE_LOGO"] = 4] = "SALESFORCE_LOGO";
    QuipIcon[QuipIcon["SYNCING"] = 5] = "SYNCING";
    QuipIcon[QuipIcon["IMAGE"] = 6] = "IMAGE";
    QuipIcon[QuipIcon["CALENDAR"] = 7] = "CALENDAR";
    QuipIcon[QuipIcon["PROCESS_BAR"] = 8] = "PROCESS_BAR";
    QuipIcon[QuipIcon["KANBAN"] = 9] = "KANBAN";
    QuipIcon[QuipIcon["POLL"] = 10] = "POLL";
    QuipIcon[QuipIcon["COUNTDOWN"] = 11] = "COUNTDOWN";
    QuipIcon[QuipIcon["PROJECT_TRACKER"] = 12] = "PROJECT_TRACKER";
    QuipIcon[QuipIcon["JIRA"] = 13] = "JIRA";
    QuipIcon[QuipIcon["COMMENT_MENU_ITEM"] = 14] = "COMMENT_MENU_ITEM";
})(QuipIcon || (QuipIcon = {}));
var CreationSource;
(function (CreationSource) {
    CreationSource["INSERT"] = "INSERT";
    CreationSource["COPY_DOCUMENT"] = "COPY_DOCUMENT";
    CreationSource["PASTE"] = "PASTE";
    CreationSource["TEMPLATE"] = "TEMPLATE";
})(CreationSource = exports.CreationSource || (exports.CreationSource = {}));
var DocumentMenuActions;
(function (DocumentMenuActions) {
    DocumentMenuActions["SHOW_FILE_PICKER"] = "SHOW_FILE_PICKER";
})(DocumentMenuActions = exports.DocumentMenuActions || (exports.DocumentMenuActions = {}));
var DocumentMenuCommands;
(function (DocumentMenuCommands) {
    DocumentMenuCommands["SEPARATOR"] = "SEPARATOR";
    DocumentMenuCommands["MENU_MAIN"] = "MENU_MAIN";
    DocumentMenuCommands["MOBILE_TOOLBAR_SECONDARY_MENU"] = "MOBILE_TOOLBAR_SECONDARY_MENU";
    DocumentMenuCommands["MOBILE_TOOLBAR_TERTIARY_MENU"] = "MOBILE_TOOLBAR_TERTIARY_MENU";
    DocumentMenuCommands["COPY_ANCHOR_LINK"] = "COPY_ANCHOR_LINK";
    DocumentMenuCommands["CUT_ELEMENT"] = "CUT_ELEMENT";
    DocumentMenuCommands["COPY_ELEMENT"] = "COPY_ELEMENT";
    DocumentMenuCommands["DELETE_ELEMENT"] = "DELETE_ELEMENT";
    DocumentMenuCommands["DELETE_APP"] = "DELETE_APP";
})(DocumentMenuCommands = exports.DocumentMenuCommands || (exports.DocumentMenuCommands = {}));
var EventType;
(function (EventType) {
    EventType["ELEMENT_BLUR"] = "ELEMENT_BLUR";
    EventType["BLUR"] = "BLUR";
    EventType["DOCUMENT_THEME_UPDATE"] = "DOCUMENT_THEME_UPDATE";
    EventType["CONTAINER_SIZE_UPDATE"] = "CONTAINER_SIZE_UPDATE";
    EventType["WINDOW_SIZE_UPDATE"] = "WINDOW_SIZE_UPDATE";
    EventType["DOCUMENT_SIZE_UPDATE"] = "DOCUMENT_SIZE_UPDATE";
    EventType["USER_PREFERENCE_UPDATE"] = "USER_PREFERENCE_UPDATE";
    EventType["SITE_PREFERENCE_UPDATE"] = "SITE_PREFERENCE_UPDATE";
    EventType["ELEMENT_FOCUS"] = "ELEMENT_FOCUS";
    EventType["FOCUS"] = "FOCUS";
    EventType["DOCUMENT_MEMBERS_LOADED"] = "DOCUMENT_MEMBERS_LOADED";
    EventType["ALLOWLISTED_USERS_LOADED"] = "ALLOWLISTED_USERS_LOADED";
    EventType["DOCUMENT_EDITABLE_CHANGED"] = "DOCUMENT_EDITABLE_CHANGED";
    EventType["ONLINE_STATUS_CHANGED"] = "ONLINE_STATUS_CHANGED";
    EventType["WIDTH_UPDATE"] = "WIDTH_UPDATE";
    EventType["THREAD_MEMBERSHIP_CHANGED"] = "THREAD_MEMBERSHIP_CHANGED";
})(EventType = exports.EventType || (exports.EventType = {}));
var MenuIcons;
(function (MenuIcons) {
    MenuIcons["COMMENT_INLINE"] = "COMMENT_INLINE";
    MenuIcons["FULL_SCREEN"] = "FULL_SCREEN";
    MenuIcons["CROP"] = "CROP";
    MenuIcons["SALESFORCE_LOGO"] = "SALESFORCE_LOGO";
    MenuIcons["SYNCING"] = "SYNCING";
    MenuIcons["JIRA"] = "JIRA";
    MenuIcons["COMMENT_MENU_ITEM"] = "COMMENT_MENU_ITEM";
})(MenuIcons = exports.MenuIcons || (exports.MenuIcons = {}));
exports.RootEntityConstructor = class {
};
class Client {
    constructor(elementConfigId, elementId, elementLocalId, window, bridgeToken) {
        this.authsValue = {};
        this.blobsValue = {};
        this.boundingClientRectValue = {
            leftValue: 0,
            topValue: 0,
            rightValue: 0,
            bottomValue: 0,
            xValue: 0,
            yValue: 0,
            widthValue: 800,
            heightValue: 400,
        };
        this.configParamsValue = {};
        this.containerWidthValue = 800;
        this.currentDimensionsValue = {
            widthValue: 800,
            heightValue: 400,
        };
        this.dateToPickValue = new Date().getTime();
        this.displayWidthValue = 800;
        this.documentMembersValue = [];
        this.elementHtmlValue = "";
        this.isAndroidValue = false;
        this.isApiVersionAtLeastValue = true;
        this.isAppFocusedValue = true;
        this.isDocumentEditableValue = true;
        this.isThreadMemberValue = true;
        this.isElementFocusedValue = true;
        this.isExplorerTemplateValue = false;
        this.isIOsValue = false;
        this.isMacValue = true;
        this.isMobileValue = false;
        this.isOnlineValue = true;
        this.isViewerLoggedInValue = true;
        this.isViewerSiteAdminValue = false;
        this.isWindowsValue = false;
        // TODO: improve type
        this.peopleToSearchForValue = [];
        this.quipAppIdValue = "mock-app-id";
        this.quipAppVersionNumberValue = 0;
        this.quipElementIdValue = "mock-element-id";
        this.recordListsValue = {};
        this.recordsValue = {};
        this.rootRecordIdValue = "mock-root-record-id";
        this.shouldFillContainerValue = false;
        this.sitePreferencesValue = new preferences_1.default();
        this.userPreferencesValue = new preferences_1.default();
        this.usersValue = {};
        this.viewerCanSeeCommentsValue = false;
        this.viewportDimensionsValue = { widthValue: 1200, heightValue: 800 };
        this.widthValue = 800;
        this.version_ = "UNSET";
        // In production, these values will be dynamic. In this mock, they will
        // be whatever you set them to. You can set these values by setting them
        // directly on quip.apps.values[valueName].
        const viewingUser = new user_1.default();
        viewingUser.idValue = "mock-viewing-user";
        this.usersValue[viewingUser.id()] = viewingUser;
        this.viewingUserValue = viewingUser;
        this.documentMembersValue.push(viewingUser);
    }
    setVersion(version) {
        this.version_ = version;
    }
    addDetachedNode(node) { }
    addDraggableNode(node) { }
    addEventListener(type, listener) { }
    addAllowlistedlistedUser(userId) { }
    auth(name) {
        return this.authsValue[name];
    }
    clearEmbeddedIframe() { }
    createBlobFromData(data, filename) {
        return new blob_1.default();
    }
    deleteApp() { }
    deleteElement() { }
    disableResizing() { }
    dismissBackdrop(skipCallback) { }
    enableResizing(options) { }
    exitApp() { }
    fetchElementHtml(styleId = 0, styleIdSuffix = "") {
        return this.elementHtmlValue;
    }
    forceUpdateDimensions() { }
    getApiVersion() {
        return `MOCK-${this.version_}`;
    }
    getBlobById(id) {
        return this.blobsValue[id];
    }
    getBoundingClientRect() {
        return this.boundingClientRectValue;
    }
    getConfigParam(p) {
        return this.configParamsValue[p];
    }
    getConfigParams() {
        return this.configParamsValue;
    }
    getContainerWidth() {
        return 800;
    }
    getCurrentDimensions() {
        return this.currentDimensionsValue;
    }
    getDisplayWidth() {
        return 800;
    }
    getDocumentMembers() {
        return this.documentMembersValue;
    }
    getFocusedRichTextRecord() {
        return this.focusedRichTextRecordValue;
    }
    getQuipAppId() {
        return this.quipAppIdValue;
    }
    getQuipAppVersionNumber() {
        return this.quipAppVersionNumberValue;
    }
    getQuipElementId() {
        return this.quipElementIdValue;
    }
    getRecordById(id) {
        return this.recordsValue[id];
    }
    getRecordListById(id) {
        return this.recordListsValue[id];
    }
    getRootEntity() {
        return this.getRootRecord();
    }
    getRootRecord() {
        if (!this.rootRecord_) {
            throw new Error("calls to getRootRecord() before root record is registered are not allowed.");
        }
        return this.rootRecord_;
    }
    getRootRecordId() {
        return this.rootRecordIdValue;
    }
    getSelectedRecord() {
        return this.selectedRecordValue;
    }
    getSitePreferences() {
        return this.sitePreferencesValue;
    }
    getThreadId() {
        return this.threadIdValue;
    }
    getUserById(id) {
        return this.usersValue[id];
    }
    getUserPreferences() {
        return this.userPreferencesValue;
    }
    getViewingUser() {
        return this.viewingUserValue;
    }
    getViewportDimensions() {
        return this.viewportDimensionsValue;
    }
    getWidth() {
        return this.widthValue;
    }
    initialize(options) { }
    isAndroid() {
        return this.isAndroidValue;
    }
    isApiVersionAtLeast(minVersion) {
        return this.isApiVersionAtLeastValue;
    }
    isAppFocused() {
        return this.isAppFocusedValue;
    }
    isDocumentEditable() {
        return this.isDocumentEditableValue;
    }
    isThreadMember() {
        return this.isThreadMemberValue;
    }
    isElementFocused() {
        return this.isElementFocusedValue;
    }
    isExplorerTemplate() {
        return this.isExplorerTemplateValue;
    }
    isIOs() {
        return this.isIOsValue;
    }
    isMac() {
        return this.isMacValue;
    }
    isMobile() {
        return this.isMobileValue;
    }
    isOnline() {
        return this.isOnlineValue;
    }
    isViewerLoggedIn() {
        return this.isViewerLoggedInValue;
    }
    isViewerSiteAdmin() {
        return this.isViewerSiteAdminValue;
    }
    isWindows() {
        return this.isWindowsValue;
    }
    navigateToNextDocumentSection(createSection) { }
    navigateToPreviousDocumentSection(createSection) { }
    openLink(url) { }
    pickDate(callback, options) {
        callback(this.dateToPickValue);
    }
    pickUsers(callback, options) {
        callback();
    }
    recordQuipMetric(name, extra) { }
    registerClass(Class, id) {
        if (Class instanceof root_record_1.default) {
            if (this.rootRecord_) {
                throw new Error("Cannot register multiple root records");
            }
            this.rootRecord_ = new Class();
        }
    }
    registerEmbeddedIframe(node) { }
    removeDetachedNode(node) { }
    removeDraggableNode(node) { }
    removeEventListener(type, listener) { }
    searchPeople(searchString, callback) {
        callback(this.peopleToSearchForValue);
    }
    sendMessage(text, mentionIds) { }
    setPayload(payload) { }
    setSelectedEntity(record) {
        this.setSelectedRecord(record);
    }
    setSelectedRecord(record) {
        this.selectedRecordValue = record;
    }
    setWidth(width) {
        this.widthValue = width;
    }
    setWidthAndAspectRatio(width, aspectRatio) {
        this.setWidth(width);
    }
    shouldFillContainer() {
        return this.shouldFillContainerValue;
    }
    showBackdrop(onDismiss) { }
    showComments(recordId) { }
    showContextMenu(event, commandIds, highlightedCommands, disabledCommandIds, onDismiss, contextArg) { }
    showContextMenuFromButton(button, commandIds, highlightedCommands, disabledCommandIds, onDismiss, contextArg) { }
    showFilePicker(onFilesPicked, onFilesUploaded, allowedTypes, requestedThumbnailWidths) { }
    startDisplayingAboveMenus() { }
    stopDisplayingAboveMenus() { }
    updateDisplayDimensions() { }
    updateTemplateParams(templateParams, isTemplate) { }
    getTemplateParams() { return Promise.resolve({ templateParams: {}, isTemplate: false, canShowTemplateFlow: false }); }
    updateToolbar(toolbarState) { }
    updateToolbarCommandsState(disabledCommandIds, highlightedCommandIds) { }
    uploadFile(blob, onFilesUploaded, requestedThumbnailWidths) {
        // TODO: respond?
    }
    viewerCanSeeComments() {
        return this.viewerCanSeeCommentsValue;
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map