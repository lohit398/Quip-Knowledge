import { ReactNode } from "react";
import Auth from "./auth";
import ClientBlob from "./blob";
import Preferences from "./preferences";
import Record, { RecordConstructor } from "./record";
import RecordList from "./record-list";
import RichTextRecord from "./rich-text-record";
import RootRecord from "./root-record";
import User from "./user";
interface ResizingOptions {
    minWidth?: number;
    minHeight?: number;
    maintainAspectRatio?: boolean;
    listener?: (width: number, height: number) => void;
}
export interface InitializationParameters {
    isCreation: boolean;
    creationUrl?: string;
    initOptions?: string;
    initOptionsSource?: string;
    creationBlobs?: Blob[];
    creationSource: CreationSource;
}
export interface BlobWithThumbnails {
    blob: ClientBlob;
    thumbnails?: Array<ClientBlob>;
}
declare enum QuipIcon {
    COMMENT_INLINE = 1,
    FULL_SCREEN = 2,
    CROP = 3,
    SALESFORCE_LOGO = 4,
    SYNCING = 5,
    IMAGE = 6,
    CALENDAR = 7,
    PROCESS_BAR = 8,
    KANBAN = 9,
    POLL = 10,
    COUNTDOWN = 11,
    PROJECT_TRACKER = 12,
    JIRA = 13,
    COMMENT_MENU_ITEM = 14
}
export declare type ContextMenuMeta = {
    [key: string]: any;
};
export declare type MenuCommandHandler = (commandId: string, contextMenu: ContextMenuMeta | null) => boolean;
export interface MenuCommand {
    id: string;
    label?: string | ReactNode[];
    sublabel?: string;
    handler?: MenuCommandHandler;
    isHeader?: boolean;
    subCommands?: string[];
    actionId?: string;
    actionParams?: {
        [key: string]: any;
    };
    actionStarted?: () => void;
    quipIcon?: QuipIcon | MenuIcons;
}
export interface ToolbarState {
    menuCommands?: MenuCommand[];
    toolbarCommandIds?: string[];
    disabledCommandIds?: string[];
    highlightedCommandIds?: string[];
    destructiveCommandIds?: string[];
    mobileToolbarCommandIds?: string[];
}
export interface InitOptions {
    menuCommands?: MenuCommand[];
    toolbarCommandIds?: string[] | undefined;
    mobileToolbarCommandIds?: string[] | undefined;
    toolbarState?: ToolbarState;
    destructiveCommandIds?: string[] | undefined;
    initializationCallback?: (element: Element, parameters: InitializationParameters) => void;
}
export declare enum CreationSource {
    INSERT = "INSERT",
    COPY_DOCUMENT = "COPY_DOCUMENT",
    PASTE = "PASTE",
    TEMPLATE = "TEMPLATE"
}
export declare enum DocumentMenuActions {
    SHOW_FILE_PICKER = "SHOW_FILE_PICKER"
}
export declare enum DocumentMenuCommands {
    SEPARATOR = "SEPARATOR",
    MENU_MAIN = "MENU_MAIN",
    MOBILE_TOOLBAR_SECONDARY_MENU = "MOBILE_TOOLBAR_SECONDARY_MENU",
    MOBILE_TOOLBAR_TERTIARY_MENU = "MOBILE_TOOLBAR_TERTIARY_MENU",
    COPY_ANCHOR_LINK = "COPY_ANCHOR_LINK",
    CUT_ELEMENT = "CUT_ELEMENT",
    COPY_ELEMENT = "COPY_ELEMENT",
    DELETE_ELEMENT = "DELETE_ELEMENT",
    DELETE_APP = "DELETE_APP"
}
export declare enum EventType {
    ELEMENT_BLUR = "ELEMENT_BLUR",
    BLUR = "BLUR",
    DOCUMENT_THEME_UPDATE = "DOCUMENT_THEME_UPDATE",
    CONTAINER_SIZE_UPDATE = "CONTAINER_SIZE_UPDATE",
    WINDOW_SIZE_UPDATE = "WINDOW_SIZE_UPDATE",
    DOCUMENT_SIZE_UPDATE = "DOCUMENT_SIZE_UPDATE",
    USER_PREFERENCE_UPDATE = "USER_PREFERENCE_UPDATE",
    SITE_PREFERENCE_UPDATE = "SITE_PREFERENCE_UPDATE",
    ELEMENT_FOCUS = "ELEMENT_FOCUS",
    FOCUS = "FOCUS",
    DOCUMENT_MEMBERS_LOADED = "DOCUMENT_MEMBERS_LOADED",
    ALLOWLISTED_USERS_LOADED = "ALLOWLISTED_USERS_LOADED",
    DOCUMENT_EDITABLE_CHANGED = "DOCUMENT_EDITABLE_CHANGED",
    ONLINE_STATUS_CHANGED = "ONLINE_STATUS_CHANGED",
    WIDTH_UPDATE = "WIDTH_UPDATE",
    THREAD_MEMBERSHIP_CHANGED = "THREAD_MEMBERSHIP_CHANGED"
}
export declare enum MenuIcons {
    COMMENT_INLINE = "COMMENT_INLINE",
    FULL_SCREEN = "FULL_SCREEN",
    CROP = "CROP",
    SALESFORCE_LOGO = "SALESFORCE_LOGO",
    SYNCING = "SYNCING",
    JIRA = "JIRA",
    COMMENT_MENU_ITEM = "COMMENT_MENU_ITEM"
}
export declare const RootEntityConstructor: {
    new (): {};
};
export default class Client {
    authsValue: {
        [name: string]: Auth;
    };
    blobsValue: {
        [id: string]: ClientBlob;
    };
    boundingClientRectValue: {
        leftValue: number;
        topValue: number;
        rightValue: number;
        bottomValue: number;
        xValue: number;
        yValue: number;
        widthValue: number;
        heightValue: number;
    };
    configParamsValue: {
        [key: string]: any;
    };
    containerWidthValue: number;
    currentDimensionsValue: {
        widthValue: number;
        heightValue: number;
    };
    dateToPickValue: number;
    displayWidthValue: number;
    documentMembersValue: User[];
    elementHtmlValue: string;
    focusedRichTextRecordValue?: RichTextRecord;
    isAndroidValue: boolean;
    isApiVersionAtLeastValue: boolean;
    isAppFocusedValue: boolean;
    isDocumentEditableValue: boolean;
    isThreadMemberValue: boolean;
    isElementFocusedValue: boolean;
    isExplorerTemplateValue: boolean;
    isIOsValue: boolean;
    isMacValue: boolean;
    isMobileValue: boolean;
    isOnlineValue: boolean;
    isViewerLoggedInValue: boolean;
    isViewerSiteAdminValue: boolean;
    isWindowsValue: boolean;
    peopleToSearchForValue: any[];
    quipAppIdValue: string;
    quipAppVersionNumberValue: number;
    quipElementIdValue: string;
    recordListsValue: {
        [id: string]: RecordList<any>;
    };
    recordsValue: {
        [id: string]: Record;
    };
    rootRecordIdValue: string;
    selectedRecordValue?: Record;
    shouldFillContainerValue: boolean;
    sitePreferencesValue: Preferences;
    threadIdValue?: string;
    userPreferencesValue: Preferences;
    usersValue: {
        [id: string]: User;
    };
    viewerCanSeeCommentsValue: boolean;
    viewingUserValue?: User;
    viewportDimensionsValue: {
        widthValue: number;
        heightValue: number;
    };
    widthValue: number;
    private rootRecord_?;
    private version_;
    constructor(elementConfigId: string, elementId: string, elementLocalId: string, window?: Window, bridgeToken?: string);
    setVersion(version: string): void;
    addDetachedNode(node: Node): void;
    addDraggableNode(node: Node): void;
    addEventListener(type: EventType, listener: () => void): void;
    addAllowlistedlistedUser(userId: string): void;
    auth(name: string): Auth;
    clearEmbeddedIframe(): void;
    createBlobFromData(data: ArrayBuffer, filename?: string): ClientBlob;
    deleteApp(): void;
    deleteElement(): void;
    disableResizing(): void;
    dismissBackdrop(skipCallback?: boolean): void;
    enableResizing(options: ResizingOptions): void;
    exitApp(): void;
    fetchElementHtml(styleId?: number, styleIdSuffix?: string): string;
    forceUpdateDimensions(): void;
    getApiVersion(): string;
    getBlobById(id: string): ClientBlob;
    getBoundingClientRect(): {
        leftValue: number;
        topValue: number;
        rightValue: number;
        bottomValue: number;
        xValue: number;
        yValue: number;
        widthValue: number;
        heightValue: number;
    };
    getConfigParam(p: string): any;
    getConfigParams(): {
        [key: string]: any;
    };
    getContainerWidth(): number;
    getCurrentDimensions(): {
        widthValue: number;
        heightValue: number;
    };
    getDisplayWidth(): number;
    getDocumentMembers(): User[];
    getFocusedRichTextRecord(): RichTextRecord | undefined;
    getQuipAppId(): string;
    getQuipAppVersionNumber(): number;
    getQuipElementId(): string;
    getRecordById(id: string): Record;
    getRecordListById(id: string): RecordList<any>;
    getRootEntity(): RootRecord;
    getRootRecord(): RootRecord;
    getRootRecordId(): string;
    getSelectedRecord(): Record | undefined;
    getSitePreferences(): Preferences;
    getThreadId(): string | undefined;
    getUserById(id: string): User;
    getUserPreferences(): Preferences;
    getViewingUser(): User | undefined;
    getViewportDimensions(): {
        widthValue: number;
        heightValue: number;
    };
    getWidth(): number;
    initialize(options: InitOptions): void;
    isAndroid(): boolean;
    isApiVersionAtLeast(minVersion: string): boolean;
    isAppFocused(): boolean;
    isDocumentEditable(): boolean;
    isThreadMember(): boolean;
    isElementFocused(): boolean;
    isExplorerTemplate(): boolean;
    isIOs(): boolean;
    isMac(): boolean;
    isMobile(): boolean;
    isOnline(): boolean;
    isViewerLoggedIn(): boolean;
    isViewerSiteAdmin(): boolean;
    isWindows(): boolean;
    navigateToNextDocumentSection(createSection?: boolean): void;
    navigateToPreviousDocumentSection(createSection?: boolean): void;
    openLink(url: string): void;
    pickDate(callback: (dateMs: number) => void, options?: {
        initialDateMs?: number;
        anchor?: Element;
        offsetX?: number;
        offsetY?: number;
    }): void;
    pickUsers(callback: () => void, options?: {
        anchor?: Element;
        offsetX?: number;
        offsetY?: number;
    }): void;
    recordQuipMetric(name: string, extra: {
        [key: string]: string;
    }): void;
    registerClass(Class: RecordConstructor, id: string): void;
    registerEmbeddedIframe(node: Node): void;
    removeDetachedNode(node: Node): void;
    removeDraggableNode(node: Node): void;
    removeEventListener(type: EventType, listener: () => void): void;
    searchPeople(searchString: string, callback: (users: User[]) => void): void;
    sendMessage(text: string, mentionIds?: string[]): void;
    setPayload(payload: string): void;
    setSelectedEntity(record: Record): void;
    setSelectedRecord(record: Record): void;
    setWidth(width: number): void;
    setWidthAndAspectRatio(width: number, aspectRatio?: number): void;
    shouldFillContainer(): boolean;
    showBackdrop(onDismiss: () => void): void;
    showComments(recordId: string): void;
    showContextMenu(event: Event, commandIds: string[], highlightedCommands?: string[], disabledCommandIds?: string[], onDismiss?: () => void, contextArg?: Object): void;
    showContextMenuFromButton(button: Element, commandIds: string[], highlightedCommands?: string[], disabledCommandIds?: string[], onDismiss?: () => void, contextArg?: Object): void;
    showFilePicker(onFilesPicked: () => void, onFilesUploaded: (thumbnailBlobs: BlobWithThumbnails[]) => void, allowedTypes?: string[], requestedThumbnailWidths?: number[]): void;
    startDisplayingAboveMenus(): void;
    stopDisplayingAboveMenus(): void;
    updateDisplayDimensions(): void;
    updateTemplateParams(templateParams: {
        [name: string]: string;
    }, isTemplate?: boolean): void;
    getTemplateParams(): Promise<{
        templateParams: {
            [key: string]: string;
        };
        isTemplate: boolean;
        canShowTemplateFlow: boolean;
    }>;
    updateToolbar(toolbarState: ToolbarState): void;
    updateToolbarCommandsState(disabledCommandIds: string[], highlightedCommandIds: string[]): void;
    uploadFile(blob: Blob, onFilesUploaded: (thumbnailBlobs: BlobWithThumbnails[]) => void, requestedThumbnailWidths?: number[]): void;
    viewerCanSeeComments(): boolean;
}
export {};
//# sourceMappingURL=client.d.ts.map